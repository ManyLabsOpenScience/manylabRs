% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fRedsRutils.R
\name{generateOutput}
\alias{generateOutput}
\title{generateOutput}
\usage{
generateOutput(describe = describe, var.lor = NA, runningGroup = "None",
  runningAnalysis = "None")
}
\arguments{
\item{describe}{The output of function \link{\code{get.descriptives}}}

\item{var.lor}{Variance of log OR effect size}

\item{runningGroup}{The group on which the statistics in `describe` were calculated (can be: 'all', a source name, or a presentation order)}

\item{runningAnalysis}{The analysis that generated the statistics in `describe`}
}
\description{
generateOutput
}
\examples{
# This example follows some (but not all!!) steps of the main function: get.analyses()
# Select analysis 1 [Huang.1] and source 1 ['brasilia']
runningAnalysis <- 1
runningGroup    <- 'brasilia'

# Get the dataset and information about the analysis to run
masteRkeyInfo  <- get.GoogleSheet(data='ML2masteRkey')$df[runningAnalysis,]

if(masteRkeyInfo$study.slate == 1){ML2.df <- load(ML2_RawData_S1.RData)} else {ML2.df <- load(ML2_RawData_S2.RData)}

# Organise the information into a list object
analysisInfo   <- get.info(masteRkeyInfo, colnames(ML2.df), subset="all")

# Use analysisInfo to generate a cahin of filter instructions to select valid variables and cases
filterChain <- get.chain(analysisInfo)

# Apply the filterChain to extract the dataset
ML2.df <- eval(parse(text=paste("ML2.df", analysisInfo$df)))
ML2.df <- get.sourceData(filterChain, ML2.df[ML2.df$source\%in\%runningGroup], analysisInfo)

# Create a list bject with data vectors and appropriate labels, that can be passed to the analysis function
vars   <- eval(parse(text=paste0(masteRkeyInfo$stat.vars,'(ML2.df)',collapse="")))

# Get the paramers for the parameters to use fo the analysis
stat.params <<- analysisInfo$stat.params

# Run the analysis listed in masteRkey column 'stat.test' usinf the data vectors in 'vars'
stat.test   <- with(vars, eval(parse(text = masteRkeyInfo$stat.test)))

# Return descriptives and summaries
describe <- get.descriptives(stat.test = stat.test, vars = vars, keytable  = masterKeyInfo)

# Generate output
ESCI <- generateOutput(describe = describe, runningGroup = runningGroup, runningAnalysis = runningAnalysis)

}
\author{
Fred Hasselman
}
